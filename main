#include <FS.h>          // this needs to be first, or it all crashes and burns...

//Ethernet part headers
#include <WiFi.h>
#include "user_global.h"
#include "WebApp.h"
bool is_esp_restart_for_ethernet = false;
//_______________________________________________

//P10 part headers.
#include <DMD32.h>
#include <SPI.h>
#include "fonts/SystemFont5x7.h"  
#include "fonts/Arial_black_16.h"  //Option A
#include "fonts/Droid_Sans_16.h"  //Option B
#include "fonts/Arial_Black_16_ISO_8859_1.h"  //Option C
int nums;
char speed_select_of_p10;
int speed_select_of_p10_timer;
//_________________________________________________

//SD part headers
#include <SD.h>
//_____________________________________________

//headers for wifimanger
#include <WiFiManager.h> // wifimanager library. this will configure local networks available. first AP connection and then   Station mode.
#include <WebServer.h>
#include "PageIndex.h" 
#include <Preferences.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include "SPIFFS.h"

//libraries for keypad
#include <Wire.h>
#include <Keypad_I2C.h>
#include <Keypad.h>
#define I2CADDR 0x20
char p10_numbers;
const int newSDA = 33;  // New SDA pin number for i2c
const int newSCL = 32;  // New SCL pin number for i2c
bool isHashEntered = false; // Flag to indicate if '#' is entered
bool isstarEntered = false;
 the SDA pin handles the data transmission, while the SCL pin provides the clock signal for synchronisation in the I2C protocol. These pins are essential for establishing communication and enabling devices to exchange information on an I2C bus.


const byte ROWS = 4; //four rows
const byte COLS = 4; //three columns
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

// Digitran keypad, bit numbers of PCF8574 i/o port
byte rowPins[ROWS] = {0, 1, 2, 3}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {4, 5, 6, 7}; //connect to the column pinouts of the keypad

Keypad_I2C kpd( makeKeymap(keys), rowPins, colPins, ROWS, COLS, I2CADDR, PCF8574 );

//_____________________________________________________________

#define key_Txt "abc" // key to load the user interface

String display_Modes = "";
String single_Row_Txt = "";


WebServer server(80);
//IPAddress localIP(192, 168, 1, 200);
//IPAddress gateway(192, 168, 1, 1);
Preferences preferences;
//___________________________________________


// Fire up the DMD library as dmd
byte DISPLAYS_ACROSS;
byte DISPLAYS_DOWN;
DMD dmd(1, 1);
int char_num;
char print_text[25000];
bool P10_displaying_style = false;
char selecter = 'B';

//________________________________________________

//bools and define for strtup keypad
unsigned long buttonPressStartTime = 0; // The time when the button was pressed


//_________________________________


//Set up for ethernet
char p10text[25000];
int i = 0;
//____________________________________

// SD card setup
const int chipSelect = 15;
File dataFile;
char txtin_sd[25000];

//____________________________________________


bool is_loop_done = false;  // a bool for set up the ethernet function
bool is_mainfunc_happened_with_wifiman = false;
//setup for p10
// Timer setup
// Create a hardware timer of ESP32
hw_timer_t *timer = NULL;
/*--------------------------------------------------------------------------------------
  Interrupt handler for Timer1 (TimerOne) driven DMD refresh scanning, this gets
  called at the period set in Timer1.initialize();
--------------------------------------------------------------------------------------*/
void IRAM_ATTR triggerScan()
{
  dmd.scanDisplayBySPI();
}
//_________________________________________






//this function will read SD card and return that as an array.
char *sd()
{
  if (!SD.begin(chipSelect))
  {
    Serial.println("SD card failed");
    while (1)
      ; // Stop execution if SD card initialization fails
  }

  // Open the data file on the SD card
  dataFile = SD.open("/data.txt");
  if (!dataFile)
  {
    Serial.println("File not found");
    while (1)
      ; // Stop execution if file opening fails
  }

  if (dataFile.available())
  {
    // Read the entire sentence from the file
    String sentence = dataFile.readStringUntil('\n');
    char *char_array_sentence = new char[sentence.length() + 1];
    sentence.toCharArray(char_array_sentence, sentence.length() + 1);

    dataFile.close();
    SD.end();

    return char_array_sentence;
  }

  dataFile.close();
  SD.end();

  return nullptr; // Return nullptr if no data is available
}
//end of the sd() function.
//_____________________________________________


//functions for wifimanager >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void handleRoot() {
  server.send(200, "text/html", MAIN_page); //Send web page
}

void handleSettings() {
  timerAlarmDisable(timer);
  delay(1000);
 
  String incoming_Settings = server.arg("Settings");
  Serial.println();
  Serial.print("Incoming settings : ");
  Serial.println(incoming_Settings);
    if (getValue(incoming_Settings, ',', 0) == key_Txt) {
        display_Modes = getValue(incoming_Settings, ',', 1);
        if (display_Modes == "SR") {
          single_Row_Txt = getValue(incoming_Settings, ',', 2);
         
          // Save texts and modes to flash memory.
          preferences.begin("P10_SD", false);
          preferences.putString("DM", display_Modes);
          preferences.putString("SRT", single_Row_Txt);
          preferences.end();
          delay(500);
        }
        server.send(200, "text/plane", "+OK");  //--> Sending replies to the client.
    delay(500);
  } else {
    server.send(200, "text/plane", "+ERR"); //--> Sending replies to the client.
    delay(500);
  }
 
  timerAlarmEnable(timer);
  delay(500);
}


String getValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = { 0, -1 };
  int maxIndex = data.length() - 1;
 
  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }
  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}




//iniating p10_________________________________________

void p10init(){
 //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//inializing the p10 led display 

  // Return the clock speed of the CPU
 uint8_t cpuClock = ESP.getCpuFreqMHz();
// Use 1st timer of 4

// Divide the CPU clock speed on its speed value by MHz to get 1us for each signal of the timer
  timer = timerBegin(0, cpuClock, true);

// Attach triggerScan function to our timer
  timerAttachInterrupt(timer, &triggerScan, true);
   
// Set alarm to call triggerScan function
// Repeat the alarm (third parameter)
  timerAlarmWrite(timer, 300, true);

// Start an alarm
  timerAlarmEnable(timer);

// Clear/init the DMD pixels held in RAM
// true is normal (all pixels off), false is negative (all pixels on)
 // dmd.clearScreen(true); 
//_____________________________________________
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
}

// wifimanager setups declared in setup as function
void p10funcinsetup(){
  WiFiManager wifiManager;

  //exit after config instead of connecting
  wifiManager.setBreakAfterConfig(true);
   
   
  display_Modes.reserve(5);
  single_Row_Txt.reserve(50);
  delay(500);

  Serial.println("Load data stored in flash memory.");
  preferences.begin("P10_SD", false);
 
  display_Modes = preferences.getString("DM", "");
  single_Row_Txt = preferences.getString("SRT", "");
  Serial.print("display_Modes : ");
  Serial.println(display_Modes);
  Serial.print("single_Row_Txt : ");
  Serial.println(single_Row_Txt);
  preferences.end();
  delay(500);
  //reset settings - for testing
  //wifiManager.resetSettings();
  Serial.println();
  Serial.println("return the clock speed of the CPU.");
  // return the clock speed of the CPU.
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  delay(500);
  Serial.println();
  Serial.println("Timer Begin");
  // Use 1st timer of 4.
  // devide cpu clock speed on its speed value by MHz to get 1us for each signal  of the timer.
  timer = timerBegin(0, cpuClock, true);
  delay(500);

  Serial.println();
  Serial.println("Attach triggerScan function to our timer.");
  // Attach triggerScan function to our timer.
  timerAttachInterrupt(timer, &triggerScan, true);
  delay(500);

  Serial.println();
  Serial.println("Set alarm to call triggerScan function.");
  // Set alarm to call triggerScan function.
  // Repeat the alarm (third parameter).
  timerAlarmWrite(timer, 300, true);
  delay(500);

  Serial.println();
  Serial.println("Start an alarm.");
  // Start an alarm.
  timerAlarmEnable(timer);
  delay(500);



    timerAlarmDisable(timer);
  delay(1000);

  //----------------------------------------Wait for connection
//  Serial.println();
//  Serial.print("Connecting to : ");
//
//  WiFi.mode(WIFI_STA);
//  Serial.println(ssid)

  //tries to connect to last known settings
  //if it does not connect it starts an access point with the specified name
  //here  "AutoConnectAP" with password "password"
  //and goes into a blocking loop awaiting configuration
  if (!wifiManager.autoConnect("AutoConnectAP", "password")) {
    Serial.println("failed to connect, we should reset as see if it connects");
    delay(3000);
    ESP.restart();
    delay(5000);
  }

  //if you get here you have connected to the WiFi
  Serial.println("connected...yeey :)");


  Serial.println("local ip");
  Serial.println(WiFi.localIP());

  IPAddress ipAddress = WiFi.localIP();
  char ipAddressArray[16];
  sprintf(ipAddressArray, "%d.%d.%d.%d", ipAddress[0], ipAddress[1], ipAddress[2], ipAddress[3]);

  Serial.print("Local IP address: ");
  Serial.println(ipAddressArray);

  
  server.on("/", handleRoot);
  server.on("/setText", handleSettings);
  server.begin();
  Serial.println();
  Serial.println("HTTP server started");

  delay(500);
  timerAlarmEnable(timer);
  int steps = 0;

  while( steps != 3){


   dmd.drawMarquee(ipAddressArray,16,(32*DISPLAYS_ACROSS)-1,0);
   long start=millis();
   long timer=start;
   boolean ret=false;
   while(!ret){
     if ((timer+40) < millis()) {
       ret=dmd.stepMarquee(-1,0);
       timer=millis();
     }
   }
   steps++;
  }
  delay(500);
}

//____________________________________________________________




//setup a loop function for printing the sd input
void myloop(){
 // byte b;
  strcpy(print_text, txtin_sd);
   printinp10();
  }
  //End of the loop for Sd module.
//_________________________________________________________________________



//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// a loop function for ethernet part 
void myloop2(){
if(is_loop_done){
  
      for(int del = 0 ; del <= char_num ; del++){
  print_text[del] = '\0';
}


    strcpy(print_text, p10text);

    printinp10();
 }

}

//end of the loop2
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


//myloop3 a loop for wifi manager
void myloop3(){

  server.handleClient();  

  if (display_Modes == "SR") {

  char CA_single_Row_Txt[single_Row_Txt.length() + 1];
  single_Row_Txt.toCharArray(CA_single_Row_Txt, single_Row_Txt.length() + 1);

  strncpy(txtin_sd,CA_single_Row_Txt , sizeof(txtin_sd) - 1);
    txtin_sd[sizeof(txtin_sd) - 1] = '\0';// Ensure null-terminated string

for(int del = 0 ; del <= char_num ; del++){
  print_text[del] = '\0';
}


  strcpy(print_text, txtin_sd);
   printinp10();
     }

}

void keypad_num_select() {
  Wire.begin(newSDA, newSCL); // Initialize I2C with new pin numbers
  kpd.begin(makeKeymap(keys));
  char key = kpd.getKey();
  if (key) {
    if (key == '#') {
      isHashEntered = true; // Set flag when '#' is entered
    } else  {
      Serial.println(key);
      nums = nums*10 + atoi(&key); // Store the entered number
    }
  }
}


void p10_speed_select(){
  Wire.begin(newSDA, newSCL); // Initialize I2C with new pin numbers
  kpd.begin(makeKeymap(keys));
  char key = kpd.getKey();
  if (key) {
    if (key == '#') {
      isHashEntered = true; // Set flag when '#' is entered
    } else  {
      Serial.println(key);
      speed_select_of_p10 = key; // Store the entered number
   
// Wire.end();

 switch(speed_select_of_p10) {
  case 'A':
    speed_select_of_p10_timer = 15;
    break;
  case 'B':
    speed_select_of_p10_timer = 30;
    break;
  case 'C':
    speed_select_of_p10_timer = 45;
    break;
    case 'D':
    speed_select_of_p10_timer = 60;
    break;
    case '*':
    P10_displaying_style = true;


     }
  
  }

}

}

void Char_num_select_for_p10(){
  Wire.begin(newSDA, newSCL); // Initialize I2C with new pin numbers
  kpd.begin(makeKeymap(keys));
  char key = kpd.getKey();
  if (key) {
    if (key == '#') {
      isHashEntered = true; // Set flag when '#' is entered
    } else  {
      Serial.println(key);
      char_num = char_num*10 + atoi(&key); // Store the entered number
    }
  }
}

//void stop_being_static(){
//   Wire.begin(newSDA, newSCL); // Initialize I2C with new pin numbers
//  kpd.begin(makeKeymap(keys));
//  char key = kpd.getKey();
//    if (key == '*') {
//      isstarEntered = true;
//      P10_displaying_style = false;
//    isHashEntered = false;
//        Serial.println("ENTER THE SPEED OF P10");
//      while (!isHashEntered) {
//p10_speed_select();
//                        }
//    } 
//  
//}

 void p10_font_select(){

   Wire.begin(newSDA, newSCL); // Initialize I2C with new pin numbers
  kpd.begin(makeKeymap(keys));
  char key = kpd.getKey();
  if (key) {
    if (key == '#') {
      isHashEntered = true; // Set flag when '#' is entered
    } else  {
      Serial.println(key);
      selecter = key; // Store the entered number
    }
   }
 }



void printinp10(){
if(!P10_displaying_style){
    // 10 x 14 font clock, including a demo of OR and NOR modes for pixels so that the flashing colon can be overlayed

  if (print_text[0] != '\0') // Check if text is available
  {
    Serial.println(print_text);
    dmd.drawMarquee(print_text, char_num, (32 * DISPLAYS_ACROSS) - 1, 0);
  }

  long start = millis();
  long timer = start;

  boolean ret = false;
  while (!ret)
  {
    if ((timer + speed_select_of_p10_timer) < millis())
    {
      ret = dmd.stepMarquee(-1, 0);
      timer = millis();
    }
  }
}else{
  dmd.drawString(0,0,print_text, char_num, GRAPHICS_NORMAL);  //--> dmd.drawString(x, y, Text, Number of characters in text, GRAPHICS_NORMAL);
  delay(3000);
  Wire.begin(newSDA, newSCL); // Initialize I2C with new pin numbers
  kpd.begin(makeKeymap(keys));
  char key = kpd.getKey();
// isstarEntered = false;
//      while (!isstarEntered) {
//        stop_being_static();
//                        }

}


}

 

void setup()
{
  Serial.begin(115200); // Serial begin


  
  Serial.println("Enter the number of p10 ");
  // Wait for '#' to be entered
  while (!isHashEntered) {
    keypad_num_select();
  }
    Serial.println(nums);
    
 DISPLAYS_ACROSS = nums;
 DISPLAYS_DOWN = 1;

    Serial.println("disply is set on ");
    Serial.println(DISPLAYS_ACROSS);
    dmd = DMD(DISPLAYS_ACROSS, DISPLAYS_DOWN);
 
    isHashEntered = false;
        Serial.println("ENTER THE SPEED OF P10");
      while (!isHashEntered) {
p10_speed_select();
                        }


  Serial.setDebugOutput(false);  // a function for ethernet part
  delay(50);
//_____________________________________________


// reading the sd input by calling sd() function
char *txt = sd();
  if (txt != nullptr)
  {
    strncpy(txtin_sd, txt, sizeof(txtin_sd) - 1);
    txtin_sd[sizeof(txtin_sd) - 1] = '\0'; // Ensure null-terminated string
    delete[] txt;
  }
 //____________________________________________________


 //P10 Font Select
 isHashEntered = false;
        Serial.println("Enter the Font of p10");
      while (!isHashEntered) {
p10_font_select();
                 }


   p10init();


   //p10 char number select---------------------
       isHashEntered = false;
        Serial.println("ENTER THE char number OF P10");
      while (!isHashEntered) {
Char_num_select_for_p10();
                        }


                //.................Running Text.
  String txt_1 = "P10 Is All Set";
  char char_array_txt_1[txt_1.length() + 1];
  txt_1.toCharArray(char_array_txt_1, txt_1.length() + 1);
    dmd.clearScreen(true);
  dmd.selectFont(Arial_Black_16);
  delay(1000);
  dmd.drawMarquee(char_array_txt_1,txt_1.length(),(32*DISPLAYS_ACROSS)-1,0);
  long start_1=millis();
  long timer_1=start_1;
  boolean ret=false;
  while(!ret){
   if ((timer_1+30) < millis()) {
     ret=dmd.stepMarquee(-1,0);
     timer_1=millis();
   }
  }        



    userInit(); //iniate the ethernet.
  //pinMode(buttonPin, INPUT_PULLUP); // Set the button pin as input with pull-up resistor

// pinmode of switches...
  pinMode(16, INPUT_PULLUP);  
    pinMode(17, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);


   // Wire.begin(newSDA, newSCL);  // Initialize I2C with new pin numbers
   // kpd.begin(makeKeymap(keys));
  buttonPressStartTime = millis(); // Update the button press start time

//end of the setup
}



//function that reads ethernet input and deliver into an array called P10text
void function(char *ch){
p10text[i++] = *ch;

for(int n = i; n < 100 ; n++ ){
p10text[n] = '\0';
}



}


//_____________________________________________________________

//function that runs after reads input from ethernet
void indicator(){  
  delay(50);
//text[0]='\0';
is_loop_done = true; //indicate to run the p10 led display.
  i = 0; // set up the array for a new input.
}





void loop()
{
  if(selecter == 'A'){
  dmd.clearScreen(true);
  dmd.selectFont(Arial_Black_16);
  }
  else if(selecter == 'B'){  
  dmd.clearScreen(true);
  dmd.selectFont(Droid_Sans_16);
    }
  else if(selecter == 'C'){  
  dmd.clearScreen(true);
  dmd.selectFont(Arial_Black_16_ISO_8859_1);
    }    
  else if(selecter == 'D'){  
  dmd.clearScreen(true);
  dmd.selectFont(SystemFont5x7);
    }

  
       if(!digitalRead((17)))
    {
Serial.println("case1");
 myloop();
    }
  if(!digitalRead((16))){
Serial.println("case2");
        delay(5);
            ENCPacketReceive();
             myloop2();

  }
  if(!digitalRead((4))){
            
             
 if(! is_mainfunc_happened_with_wifiman){
              p10funcinsetup();
              is_mainfunc_happened_with_wifiman = true;}
              myloop3();
Serial.println("case3");
  }



}








